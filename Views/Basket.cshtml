@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<title>KTUN Market - Sepet</title>

<div class="row">
    <div class="col-12">
        <a  class="link-body-emphasis" href="/">
            <h6 style="cursor: pointer;">
                <i class="bi bi-arrow-left"></i>
                Geri
            </h6>
        </a>
        <h2 class="mb-3">Sepetim</h2>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <!-- Basket items -->
        <div class="card mb-4">
            <div class="card-body">
                <div id="basket-items">
                    <!-- Empty basket message (will be hidden when items exist) -->
                    <div id="empty-basket" class="text-center py-5">
                        <i class="bi bi-basket text-muted" style="font-size: 3rem;"></i>
                        <h5 class="mt-3">Sepetiniz boş</h5>
                        <p class="text-muted">Alışverişe başlamak için ürünleri sepetinize ekleyin.</p>
                        <a href="/" class="btn btn-primary mt-2">Alışverişe Başla</a>
                    </div>

                    <!-- Item template (will be repeated for each item via JavaScript) -->
                    <div class="basket-item d-none">
                        <div class="d-flex align-items-center mb-3 pb-3 border-bottom">
                            <img src="" alt="" class="item-image rounded" width="80" height="80" style="object-fit: cover;">
                            <div class="ms-3 flex-grow-1">
                                <h5 class="item-name mb-1"></h5>
                                <p class="item-price text-muted mb-0"></p>
                            </div>
                            <div class="d-flex align-items-center">
                                <div class="input-group input-group-sm" style="width: 120px;">
                                    <button class="btn btn-outline-secondary decrease-quantity" type="button">-</button>
                                    <input type="text" class="form-control text-center item-quantity" value="1" readonly>
                                    <button class="btn btn-outline-secondary increase-quantity" type="button">+</button>
                                </div>
                                <button class="btn btn-sm btn-outline-danger ms-3 remove-item">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <!-- Order summary -->
        <div class="card">
            <div class="card-header bg-white">
                <h5 class="mb-0">Sipariş Özeti</h5>
            </div>
            <div class="card-body">
                <div class="d-flex justify-content-between mb-2">
                    <span>Ara Toplam</span>
                    <span id="subtotal">0,00 ₺</span>
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <span>Kargo</span>
                    <span id="shipping">0,00 ₺</span>
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <span>KDV (%18)</span>
                    <span id="tax">0,00 ₺</span>
                </div>
                <hr>
                <div class="d-flex justify-content-between mb-3">
                    <strong>Toplam</strong>
                    <strong id="total">0,00 ₺</strong>
                </div>

                <a href="/Checkout">
                <button id="checkout-button" class="btn btn-primary w-100" disabled>
                    Siparişi Tamamla
                </button>
                </a>
            </div>
        </div>

        <!-- Promo code -->
        <div class="card mt-3">
            <div class="card-body">
                <h6>Promosyon Kodu</h6>
                <div class="input-group mt-2">
                    <input type="text" class="form-control" placeholder="Kodunuzu girin">
                    <button class="btn btn-outline-secondary" type="button">Uygula</button>
                </div>
            </div>
        </div>

        <!-- Clear basket button -->
        <div class="card mt-3">
            <div class="card-body">
                <button id="clear-basket-button" class="btn btn-outline-danger w-100">
                    <i class="bi bi-trash me-2"></i>Sepeti Temizle
                </button>
            </div>
        </div>
    </div>
    
    <style>
        #basket-button{
            display: none !important;
        }
    </style>
</div>

<!-- JavaScript for basket functionality -->
<script>
    // JavaScript for basket functionality
    document.addEventListener('DOMContentLoaded', function() {
        // Get current user ID
        let basketItems = [];

        // Load basket items
        loadBasketItems();

        // Load basket items from API
        function loadBasketItems() {
            fetch(`/Product/GetBasketProducts`)
                .then(response => response.json())
                .then(data => {
                    basketItems = data;
                    renderBasket();
                })
                .catch(error => {
                    console.error('Error loading basket items:', error);
                });
        }

        // Render basket items
        function renderBasket() {
            const basketItemsContainer = document.getElementById('basket-items');
            const emptyBasket = document.getElementById('empty-basket');
            const templateItem = document.querySelector('.basket-item.d-none'); // Make sure we're selecting the hidden template
            const subtotalElement = document.getElementById('subtotal');
            const shippingElement = document.getElementById('shipping');
            const totalElement = document.getElementById('total');
            const checkoutButton = document.getElementById('checkout-button');
            const taxElement = document.querySelector('#tax');

            // Clear previous items (except template and empty message)
            Array.from(basketItemsContainer.children).forEach(child => {
                if (!child.classList.contains('d-none') && child.id !== 'empty-basket') {
                    child.remove();
                }
            });

            if (!basketItems || basketItems.length === 0) {
                // Show empty basket message and disable checkout
                emptyBasket.classList.remove('d-none');
                checkoutButton.disabled = true;
                subtotalElement.textContent = '0,00 ₺';
                shippingElement.textContent = '0,00 ₺';
                totalElement.textContent = '0,00 ₺';
                return;
            }

            // Hide empty basket message and enable checkout
            emptyBasket.classList.add('d-none');
            checkoutButton.disabled = false;

            // Calculate totals
            let subtotal = 0;
            basketItems.forEach(item => {
                const price = item.product.getDiscountedPrice
                    ? item.product.getDiscountedPrice()
                    : (item.product.price - (item.product.price * item.product.discount / 100));
                subtotal += price * item.quantity;
            });

            const shipping = subtotal > 500 ? 0 : 29.90; 
            const tax = subtotal * 0.18;
            const total = subtotal + shipping + tax;

            subtotalElement.textContent = formatPrice(subtotal);
            shippingElement.textContent = formatPrice(shipping);
            totalElement.textContent = formatPrice(total);
            taxElement.textContent = formatPrice(tax);
            

            // Render each item
            basketItems.forEach(item => {
                // Clone the template
                const newItem = templateItem.cloneNode(true);
                newItem.classList.remove('d-none');

                const price = item.product.getDiscountedPrice
                    ? item.product.getDiscountedPrice()
                    : (item.product.price - (item.product.price * item.product.discount / 100));

                try {
                    // Set item details - Using try/catch to help diagnose issues
                    const imageUrl = item.product.images ? item.product.images.split(',')[0] : '/assets/placeholder.jpg';

                    const imageElement = newItem.querySelector('.item-image');
                    if (imageElement) {
                        imageElement.src = imageUrl;
                        imageElement.alt = item.product.name;
                    }

                    const nameElement = newItem.querySelector('.item-name');
                    if (nameElement) {
                        nameElement.textContent = item.product.name;
                    }

                    const priceElement = newItem.querySelector('.item-price');
                    if (priceElement) {
                        priceElement.textContent = formatPrice(price);
                    }

                    const quantityElement = newItem.querySelector('.item-quantity');
                    if (quantityElement) {
                        quantityElement.value = item.quantity;
                    }

                    // Set data attribute directly on the new item
                    newItem.setAttribute('data-product-id', item.productId);

                    // Add event listeners with proper selector targeting
                    const increaseBtn = newItem.querySelector('.increase-quantity');
                    if (increaseBtn) {
                        increaseBtn.addEventListener('click', function() {
                            const productId = newItem.getAttribute('data-product-id');
                            addToBasket(productId);
                        });
                    }

                    const decreaseBtn = newItem.querySelector('.decrease-quantity');
                    if (decreaseBtn) {
                        decreaseBtn.addEventListener('click', function() {
                            const productId = newItem.getAttribute('data-product-id');
                            decreaseQuantity(productId);
                        });
                    }

                    const removeBtn = newItem.querySelector('.remove-item');
                    if (removeBtn) {
                        removeBtn.addEventListener('click', function() {
                            const productId = newItem.getAttribute('data-product-id');
                            removeFromBasket(productId);
                        });
                    }

                    // Append the new item to the container
                    basketItemsContainer.appendChild(newItem);
                } catch (error) {
                    console.error('Error rendering basket item:', error);
                }
            });
        }

        // Add to basket
        function addToBasket(productId) {
            fetch('/Product/AddProductToBasketProduct?productId=' + productId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
            })
                .then(response => response.json())
                .then(data => {
                    loadBasketItems();
                })
                .catch(error => {
                    console.error('Error adding product to basket:', error);
                });
        }

        // Decrease quantity
        function decreaseQuantity(productId) {
            fetch('/Product/RemoveOneProductFromBasketProduct?productId=' + productId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
            })
                .then(response => response.json())
                .then(data => {
                    loadBasketItems();
                })
                .catch(error => {
                    console.error('Error decreasing product quantity:', error);
                });
        }

        // Remove item from basket
        function removeFromBasket(productId) {
            fetch('/Product/RemoveProductFromBasketProduct?productId=' + productId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
            })
                .then(response => response.json())
                .then(data => {
                    loadBasketItems();
                })
                .catch(error => {
                    console.error('Error removing product from basket:', error);
                });
        }

        // Clear entire basket
        function clearBasket() {
            fetch('/Product/RemoveAllProductsFromBasketProduct', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
            })
                .then(response => response.json())
                .then(data => {
                    loadBasketItems();
                })
                .catch(error => {
                    console.error('Error clearing basket:', error);
                });
        }

        // Format price with Turkish currency
        function formatPrice(price) {
            return new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(price);
        }

        // Clear basket button handler
        document.getElementById('clear-basket-button').addEventListener('click', function() {
            if (confirm('Sepetinizdeki tüm ürünleri silmek istediğinize emin misiniz?')) {
                clearBasket();
            }
        });
    });
</script>