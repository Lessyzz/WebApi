@using Newtonsoft.Json
@using WebApi.Dto
@model WebApi.Models.Product
@{
Layout = "~/Views/Shared/_Layout.cshtml";
var reviewStatistics = ViewBag.ReviewStatistics as ReviewStatisticsViewModel;
}

<head>
    <title>@Model.Name</title>
</head>

<h5 class="mt-4 mb-3" style="cursor: pointer;">
    <a  class="link-body-emphasis" href="javascript: history.go(-1);">
        <i class="bi bi-arrow-left"></i>
        Geri
    </a>
</h5>
<div class="container">
    <div class="row shadow p-4 position-relative">
        @if (Model.Discount > 0)
        {
            <div class="discount-badge-overflowed">@Model.Discount% İndirim</div>
        }
        <div class="col-12 col-lg-6 text-center mb-4">
            @{
                var imageArray = Model.Images.Split(',');
            }

            <!-- Main large image -->
            <div class="mb-3">
                <img id="mainImage" class="img-fluid" src="@imageArray[0]"
                     style="max-width: min(500px, 100%); max-height: 500px;">
            </div>

            <!-- Thumbnail images row -->
            <div class="row g-2 justify-content-center">
                @for (int i = 0; i < imageArray.Length; i++)
                {
                    <div class="col-auto">
                        <img class="img-thumbnail product-thumbnail"
                             src="@imageArray[i]"
                             style="width: 80px; height: 80px; object-fit: cover; cursor: pointer;"
                             onclick="changeMainImage('@imageArray[i]')"
                             alt="Product image @(i+1)">
                    </div>
                }
            </div>
        </div>
        <div class="col-12 col-lg-6" style="display: flex; flex-direction: column;">
            <h4>@Model.Name</h4>
            <div class="d-flex align-items-center mt-3">
                <div class="me-2">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= Math.Floor(reviewStatistics.AverageRating))
                        {
                            <i class="bi bi-star-fill text-warning"></i>
                        }
                        else if (i == Math.Ceiling(reviewStatistics.AverageRating) && reviewStatistics.AverageRating % 1 != 0)
                        {
                            <i class="bi bi-star-half text-warning"></i>
                        }
                        else
                        {
                            <i class="bi bi-star text-warning"></i>
                        }
                    }
                </div>
                <span class="me-2">@reviewStatistics.AverageRating</span>
                <span>(@reviewStatistics.TotalReviews Değerlendirme)</span>
            </div>
            <div class="d-flex align-items-center">
                <h5 class="text-primary me-2" style="font-size: 1.25rem; font-weight: bold;">
                    @String.Format("{0:N2} ₺", @Model.GetDiscountedPrice())
                </h5>
                @if (Model.Discount > 0)
                {
                    <h6 class="text-decoration-line-through" style="font-size: 1rem; color: #888; margin-top: 0.25rem;">
                        @String.Format("{0:N2} ₺", @Model.Price)
                    </h6>
                }
            </div>
            <div class="mt-1 text-primary small">
                <span>Satıcı: </span>  @Model.ProductSeller.Username
            </div>

            <div class="mt-5">
                @if (!string.IsNullOrEmpty(Model.Features))
                {
                    var featuresDict = JsonConvert.DeserializeObject<Dictionary<string, string>>(Model.Features);
                    for (int i = 0; i < Math.Min(featuresDict.Count, 5); i++)
                    {
                        var feature = featuresDict!.ElementAt(i);
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-check-circle text-success me-2"></i>
                            <span>@feature.Key: @feature.Value</span>
                        </div>
                    }
                }
            </div>
            
            <div class="d-flex align-items-end mt-5" style="flex-grow: 1;">
                <div class="d-flex align-items-center me-3">
                    <button class="btn btn-outline-secondary rounded-circle" onclick="remove()">
                        <i class="bi bi-dash"></i>
                    </button>
                    <input id="quantity-input" type="number" value="1" min="1" class="form-control mx-2"
                           style="width: 70px; text-align: center;">
                    <button class="btn btn-outline-secondary rounded-circle" onclick="add()">
                        <i class="bi bi-plus"></i>
                    </button>
                </div>
                <button class="btn btn-primary ms-auto" onclick="addToBasketWithQuantity()">Sepete Ekle</button>
            </div>
        </div>
    </div>

    <div class="row bg-light rounded p-4 mt-4">
        <div class="col-12">
            <ul class="nav nav-tabs" id="productTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active d-flex align-items-center" id="features-tab" data-bs-toggle="tab"
                        data-bs-target="#features" type="button" role="tab" aria-controls="features"
                        aria-selected="true">
                        <i class="bi bi-brush me-2"></i>
                        <span>Özellikler</span>
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link d-flex align-items-center" id="reviews-tab" data-bs-toggle="tab"
                            data-bs-target="#reviews" type="button" role="tab" aria-controls="reviews"
                            aria-selected="false">
                        <i class="bi bi-star me-2"></i>
                        <span>Değerlendirmeler (@reviewStatistics.TotalReviews)</span>
                    </button>
                </li>

            </ul>

            <div class="tab-content p-4" id="productTabsContent">
                <div class="tab-pane fade show active" id="features" role="tabpanel" aria-labelledby="features-tab">
                    <p>
                        @Model.Description
                    </p>
                </div>
                <div class="tab-pane fade" id="reviews" role="tabpanel" aria-labelledby="reviews-tab">
                    @await Html.PartialAsync("_ReviewsPartial", reviewStatistics)
                </div>
                
               
            </div>
        </div>
    </div>
</div>

<style>
    .discount-badge-overflowed {
        position: absolute;
        top: 30px;
        left: -10px;
        background-color: var(--bs-primary);
        color: #fff;
        padding: 5px 15px;
        font-weight: bold;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        z-index: 1;
        width: auto;
        /* Fix for 100% width issue */
        display: inline-block;
        /* Ensure it takes only needed width */
    }

    .discount-badge-overflowed::before {
        content: "";
        position: absolute;
        left: 0;
        bottom: -10px;
        border-top: 10px solid #0d6efd;
        border-left: 10px solid transparent;
        opacity: 0.8;
    }

    input[type="number"].form-control {
        -webkit-appearance: textfield;
        -moz-appearance: textfield;
        appearance: textfield;
    }

    input[type="number"].form-control::-webkit-inner-spin-button,
    input[type="number"].form-control::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
</style>

<script>
    const input = document.getElementById("quantity-input");

    function add() {
        input.value = parseInt(input.value || '1') + 1;
    }

    function remove() {
        input.value = Math.max(parseInt(input.value || '1') - 1, 1);
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Initialize Bootstrap tabs
        var tabElements = document.querySelectorAll('#productTabs button');
        tabElements.forEach(function (tabElement) {
            tabElement.addEventListener('click', function (event) {
                event.preventDefault();
                var tabId = this.getAttribute('data-bs-target');

                // Remove active class from all tabs and panes
                document.querySelectorAll('#productTabs button').forEach(function (tab) {
                    tab.classList.remove('active');
                });
                document.querySelectorAll('#productTabsContent .tab-pane').forEach(function (pane) {
                    pane.classList.remove('show', 'active');
                });

                // Add active class to selected tab and pane
                this.classList.add('active');
                document.querySelector(tabId).classList.add('show', 'active');
            });
        });
    });

    function addToBasketWithQuantity() {
        const productId = '@Model.Id'
        const quantity = input.value;
        
        fetch('/Product/AddProductToBasketProductWithQuantity?productId=' + productId + '&quantity=' + quantity, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            return response.json();
        })
        .then(data => {
            loadBasketItems();
            showToast('Ürün Sepete Eklendi!', true);
        })
        .catch(error => {
            console.error('Error adding product to basket:', error);
            showToast('Bir Hata Oluştu.', false);
        });
    }

    function changeMainImage(imageSrc) {
        document.getElementById('mainImage').src = imageSrc;
    }
</script>