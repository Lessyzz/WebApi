@using System.Text.Json
@{
    ViewData["Title"] = ViewBag.Category.Name;
}

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <title>DİJİKON - @ViewBag.Category.Name </title>
    <link rel="stylesheet" href="/assets/nouislider.min.css">
</head>

<div class="container-fluid py-4">
    <!-- Category Header -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <a  class="link-body-emphasis" href="javascript: history.go(-1);">
                    <i class="bi bi-arrow-left"></i>
                    Geri
                </a>
            </nav>
            <h2 class="mb-0">@ViewBag.Category.Name</h2>

            <!-- Child Categories as Chips -->
            <div class="d-flex flex-wrap gap-2 mt-3">
                @foreach (var childCategory in ViewBag.ChildCategories)
                {
                    <a href="/category/@childCategory.Id"
                       class="btn btn-sm btn-outline-primary">
                        @childCategory.Name
                    </a>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Filters Sidebar - Hidden on mobile -->
        <div class="col-lg-3 mb-4 d-none d-lg-block">
            <div class="card shadow-sm">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Filtreler</h5>
                    <button id="clearFilters" class="btn btn-sm btn-outline-secondary">Temizle</button>
                </div>
                <div class="card-body">
                    <!-- Price Range Filter -->
                    <div class="mb-4">
                        <h6 class="fw-bold mb-3">Fiyat Aralığı</h6>
                        <div id="priceRange"></div>
                        <div class="d-flex justify-content-between mt-2">
                            <span id="priceMin">0 ₺</span>
                            <span id="priceMax">10000 ₺</span>
                        </div>
                    </div>

                    <hr>

                    <!-- Dynamic Feature Filters -->
                    @{
                        var features = ViewBag.Category.Features.Split(',');
                        foreach (var feature in features)
                        {
                            var featureId = feature.Replace(" ", "").ToLower();
                            <div class="mb-4">
                                <h6 class="fw-bold mb-2">@feature</h6>
                                <div id="@featureId-filters" class="feature-filter-group">
                                    @foreach (var option in ViewBag.FeatureOptions[feature])
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input feature-filter" type="checkbox"
                                                   id="@featureId-@option.Replace(" ", "")"
                                                   data-feature="@feature"
                                                   data-value="@option">
                                            <label class="form-check-label" for="@featureId-@option.Replace(" ", "")">
                                                @option
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>

                            @if (Array.IndexOf(features, feature) < features.Length - 1)
                            {
                                <hr>
                            }
                        }
                    }
                    @* *@
                    @* <hr> *@
                    @* *@
                    @* <!-- Time Filter --> *@
                    @* <div class="mb-4"> *@
                    @*     <h6 class="fw-bold mb-3">Eklenme Tarihi</h6> *@
                    @*     <div id="timeRange"></div> *@
                    @*     <div class="d-flex justify-content-between mt-2"> *@
                    @*         <span id="timeMin"></span> *@
                    @*         <span id="timeMax"></span> *@
                    @*     </div> *@
                    @* </div> *@
                </div>
            </div>
        </div>

        <!-- Product Listing -->
        <div class="col-12 col-lg-9">
            <!-- Sort Options -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="result-count">
                            <p class="mb-0"><span id="productCount">@ViewBag.Products.Count</span> ürün bulundu</p>
                        </div>
                        <div class="d-flex">
                            <select id="sortOptions" class="form-select form-select-sm">
                                <option value="default">Önerilen Sıralama</option>
                                <option value="price-asc">Fiyat: Düşüktan Yükseğe</option>
                                <option value="price-desc">Fiyat: Yüksekten Düşüğe</option>
                                <option value="name-asc">İsim: A-Z</option>
                                <option value="name-desc">İsim: Z-A</option>
                                @* <option value="date-desc">En Yeni</option> *@
                                @* <option value="date-asc">En Eski</option> *@
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Products Grid -->
            <div class="row" id="productsContainer">
                @foreach (var product in ViewBag.Products)
                {
                    <div class="col-6 col-md-4 col-lg-3 mb-4 product-item"
                         data-price="@product.GetDiscountedPrice()"
                         data-created="@product.CreatedAt.Ticks"
                         data-created-date="@product.CreatedAt.ToString("yyyy-MM-dd")"
                         data-features='@product.Features'>
                        <div class="card product-card shadow-sm h-100">
                            <div class="product-image-container" style="height: 180px; padding: 15px; position: relative;">
                                <a href="/product/@product.Id">
                                    <img class="product-image" src="@product.Images.Split(',')[0]" alt="@product.Name" style="width: 100%; height: 100%; object-fit: contain;">
                                    @if (product.Discount > 0)
                                    {
                                        <span class="discount-badge position-absolute top-0 end-0 bg-danger text-white px-2 py-1 m-2 rounded">%@product.Discount</span>
                                    }
                                </a>
                            </div>
                            <div class="card-body d-flex flex-column">
                                <h6 class="card-title">@product.Name</h6>
                                <div class="d-flex justify-content-between align-items-center mt-auto">
                                    <div>
                                        <span class="fw-bold text-success">@String.Format("{0:N2} ₺", @product.GetDiscountedPrice())</span>
                                        @if (product.Discount > 0)
                                        {
                                            <span class="text-decoration-line-through text-muted small ms-1">@String.Format("{0:N2} ₺", @product.Price)</span>
                                        }
                                    </div>
                                    <button class="btn btn-sm btn-primary" onclick="addToBasket('@product.Id', 'c2ae16c5-4d71-4f38-94c6-107bd4fa47ae')">
                                        <i class="bi bi-cart-plus"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- No Results Message -->
            <div id="noResults" class="row d-none">
                <div class="col-12 text-center py-5">
                    <i class="bi bi-search" style="font-size: 3rem;"></i>
                    <h5 class="mt-3">Sonuç Bulunamadı</h5>
                    <p>Filtreleri değiştirerek tekrar deneyin.</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Mobile Filter Button (Only visible on small screens) -->
<div class="filter-toggle-container d-lg-none position-fixed bottom-0 start-0 w-100 bg-white border-top p-2">
    <button class="filter-toggle btn btn-primary w-100" type="button" data-bs-toggle="offcanvas" data-bs-target="#filterOffcanvas">
        <i class="bi bi-funnel me-2"></i> Filtreleri Göster
    </button>
</div>

<!-- Mobile Filter Offcanvas -->
<div class="offcanvas offcanvas-start" tabindex="-1" id="filterOffcanvas" aria-labelledby="filterOffcanvasLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="filterOffcanvasLabel">Filtreler</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <!-- Price Range Filter -->
        <div class="mb-4">
            <h6 class="fw-bold mb-3">Fiyat Aralığı</h6>
            <div id="mobileSlider"></div>
            <div class="d-flex justify-content-between mt-2">
                <span id="mobilePriceMin">0 ₺</span>
                <span id="mobilePriceMax">10000 ₺</span>
            </div>
        </div>

        <hr>

        <!-- Dynamic Feature Filters For Mobile -->
        @{
            foreach (var feature in features)
            {
                var featureId = feature.Replace(" ", "").ToLower();
                <div class="mb-4">
                    <h6 class="fw-bold mb-2">@feature</h6>
                    <div id="mobile-@featureId-filters" class="feature-filter-group">
                        @foreach (var option in ViewBag.FeatureOptions[feature])
                        {
                            <div class="form-check">
                                <input class="form-check-input mobile-feature-filter" type="checkbox"
                                       id="mobile-@featureId-@option.Replace(" ", "")"
                                       data-feature="@feature"
                                       data-value="@option">
                                <label class="form-check-label" for="mobile-@featureId-@option.Replace(" ", "")">
                                    @option
                                </label>
                            </div>
                        }
                    </div>
                </div>

                @if (Array.IndexOf(features, feature) < features.Length - 1)
                {
                    <hr>
                }
            }
        }
        @* *@
        @* <hr> *@
        @* *@
        @* <!-- Time Filter for Mobile --> *@
        @* <div class="mb-4"> *@
        @*     <h6 class="fw-bold mb-3">Eklenme Tarihi</h6> *@
        @*     <div id="mobileTimeRange"></div> *@
        @*     <div class="d-flex justify-content-between mt-2"> *@
        @*         <span id="mobileTimeMin"></span> *@
        @*         <span id="mobileTimeMax"></span> *@
        @*     </div> *@
        @* </div> *@

        <!-- Apply Filters Button for Mobile -->
        <div class="d-grid gap-2 mt-4">
            <button id="mobileClearFilters" class="btn btn-outline-secondary">Filtreleri Temizle</button>
        </div>
    </div>
</div>

<!-- Required Scripts -->
<script src="/assets/nouislider.min.js"></script>
<script src="/assets/wNumb.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize price range slider
        const priceRange = document.getElementById('priceRange');
        const mobileSlider = document.getElementById('mobileSlider');
        const priceMin = document.getElementById('priceMin');
        const priceMax = document.getElementById('priceMax');
        const mobilePriceMin = document.getElementById('mobilePriceMin');
        const mobilePriceMax = document.getElementById('mobilePriceMax');

        // Get min and max prices from products
        let products = document.querySelectorAll('.product-item');
        let prices = Array.from(products).map(p => parseFloat(p.dataset.price));
        let minPrice = Math.floor(Math.min(...prices));
        let maxPrice = Math.ceil(Math.max(...prices));

        // Helper function to format price
        function formatPrice(val) {
            return val.toFixed(2) + ' ₺';
        }

        // Setup desktop slider
        if (priceRange) {
            noUiSlider.create(priceRange, {
                start: [minPrice, maxPrice],
                connect: true,
                range: {
                    'min': minPrice,
                    'max': maxPrice
                },
                format: wNumb({
                    decimals: 0
                })
            });

            priceRange.noUiSlider.on('update', function(values) {
                priceMin.textContent = formatPrice(parseInt(values[0]));
                priceMax.textContent = formatPrice(parseInt(values[1]));
            });
        }

        // Setup mobile slider
        if (mobileSlider) {
            noUiSlider.create(mobileSlider, {
                start: [minPrice, maxPrice],
                connect: true,
                range: {
                    'min': minPrice,
                    'max': maxPrice
                },
                format: wNumb({
                    decimals: 0
                })
            });

            mobileSlider.noUiSlider.on('update', function(values) {
                mobilePriceMin.textContent = formatPrice(parseInt(values[0]));
                mobilePriceMax.textContent = formatPrice(parseInt(values[1]));
            });
        }

        // Sync desktop and mobile sliders
        if (priceRange && mobileSlider) {
            priceRange.noUiSlider.on('change', function(values) {
                mobileSlider.noUiSlider.set(values);
            });

            mobileSlider.noUiSlider.on('change', function(values) {
                priceRange.noUiSlider.set(values);
            });
        }

        // Initialize time range slider
        const timeRange = document.getElementById('timeRange');
        const mobileTimeRange = document.getElementById('mobileTimeRange');
        const timeMin = document.getElementById('timeMin');
        const timeMax = document.getElementById('timeMax');
        const mobileTimeMin = document.getElementById('mobileTimeMin');
        const mobileTimeMax = document.getElementById('mobileTimeMax');

        // Get min and max dates from products
        let createdDates = Array.from(products).map(p => parseInt(p.dataset.created));
        let minDate = Math.min(...createdDates);
        let maxDate = Math.max(...createdDates);

        // Helper function to format dates
        function formatDate(ticks) {
            // Convert ticks to date
            // .NET ticks are 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001 (0:00:00 UTC on January 1, 0001, in the Gregorian calendar)
            // JavaScript uses milliseconds since January 1, 1970
            const ticksTo1970 = 621355968000000000; // .NET ticks for January 1, 1970
            const ticksPerMillisecond = 10000;

            const milliseconds = (ticks - ticksTo1970) / ticksPerMillisecond;
            const date = new Date(milliseconds);

            return date.toLocaleDateString();
        }

        // Setup time sliders
        if (timeRange) {
            noUiSlider.create(timeRange, {
                start: [minDate, maxDate],
                connect: true,
                range: {
                    'min': minDate,
                    'max': maxDate
                },
                format: wNumb({
                    decimals: 0
                })
            });

            timeRange.noUiSlider.on('update', function(values) {
                timeMin.textContent = formatDate(parseInt(values[0]));
                timeMax.textContent = formatDate(parseInt(values[1]));
            });
        }

        if (mobileTimeRange) {
            noUiSlider.create(mobileTimeRange, {
                start: [minDate, maxDate],
                connect: true,
                range: {
                    'min': minDate,
                    'max': maxDate
                },
                format: wNumb({
                    decimals: 0
                })
            });

            mobileTimeRange.noUiSlider.on('update', function(values) {
                mobileTimeMin.textContent = formatDate(parseInt(values[0]));
                mobileTimeMax.textContent = formatDate(parseInt(values[1]));
            });
        }

        // Sync desktop and mobile time sliders
        if (timeRange && mobileTimeRange) {
            timeRange.noUiSlider.on('change', function(values) {
                mobileTimeRange.noUiSlider.set(values);
            });

            mobileTimeRange.noUiSlider.on('change', function(values) {
                timeRange.noUiSlider.set(values);
            });
        }

        // Apply filters function
        function applyFilters() {
            let priceValues = priceRange && priceRange.noUiSlider ? priceRange.noUiSlider.get() : mobileSlider.noUiSlider.get();
            let minPriceFilter = parseInt(priceValues[0]);
            let maxPriceFilter = parseInt(priceValues[1]);

            let timeValues = timeRange && timeRange.noUiSlider ? timeRange.noUiSlider.get() : mobileTimeRange.noUiSlider.get();
            let minTimeFilter = parseInt(timeValues[0]);
            let maxTimeFilter = parseInt(timeValues[1]);

            // Get all checked feature filters
            let checkedFilters = {};
            document.querySelectorAll('.feature-filter:checked, .mobile-feature-filter:checked').forEach(checkbox => {
                let feature = checkbox.dataset.feature;
                let value = checkbox.dataset.value;

                if (!checkedFilters[feature]) {
                    checkedFilters[feature] = [];
                }
                checkedFilters[feature].push(value);
            });

            // Filter products
            let visibleProducts = 0;
            products.forEach(product => {
                let price = parseFloat(product.dataset.price);
                let createdDate = parseInt(product.dataset.created);
                let features = JSON.parse(product.dataset.features);

                // Check price range
                let passesPrice = price >= minPriceFilter && price <= maxPriceFilter;

                // Check date range
                let passesTime = createdDate >= minTimeFilter && createdDate <= maxTimeFilter;

                // Check if product passes all active feature filters
                let passesFeatures = true;
                for (let feature in checkedFilters) {
                    if (checkedFilters[feature].length > 0) {
                        if (!features[feature] || !checkedFilters[feature].includes(features[feature])) {
                            passesFeatures = false;
                            break;
                        }
                    }
                }

                // Show or hide product
                if (passesPrice && passesFeatures && passesTime) {
                    product.classList.remove('d-none');
                    visibleProducts++;
                } else {
                    product.classList.add('d-none');
                }
            });

            // Update product count and show "no results" message if needed
            document.getElementById('productCount').textContent = visibleProducts;

            if (visibleProducts === 0) {
                document.getElementById('noResults').classList.remove('d-none');
            } else {
                document.getElementById('noResults').classList.add('d-none');
            }
        }

        // Clear filters function
        function clearFilters() {
            // Reset price slider
            if (priceRange && priceRange.noUiSlider) {
                priceRange.noUiSlider.set([minPrice, maxPrice]);
            }
            if (mobileSlider && mobileSlider.noUiSlider) {
                mobileSlider.noUiSlider.set([minPrice, maxPrice]);
            }

            // Reset time slider
            if (timeRange && timeRange.noUiSlider) {
                timeRange.noUiSlider.set([minDate, maxDate]);
            }
            if (mobileTimeRange && mobileTimeRange.noUiSlider) {
                mobileTimeRange.noUiSlider.set([minDate, maxDate]);
            }

            // Uncheck all feature filters
            document.querySelectorAll('.feature-filter, .mobile-feature-filter').forEach(checkbox => {
                checkbox.checked = false;
            });

            // Show all products
            products.forEach(product => {
                product.classList.remove('d-none');
            });

            // Update count and hide "no results" message
            document.getElementById('productCount').textContent = products.length;
            document.getElementById('noResults').classList.add('d-none');
        }

        // Add event listeners
        const clearFiltersBtn = document.getElementById('clearFilters');
        if (clearFiltersBtn) {
            clearFiltersBtn.addEventListener('click', clearFilters);
        }

        const mobileClearFiltersBtn = document.getElementById('mobileClearFilters');
        if (mobileClearFiltersBtn) {
            mobileClearFiltersBtn.addEventListener('click', clearFilters);
        }

        if (priceRange && priceRange.noUiSlider) {
            priceRange.noUiSlider.on('change', applyFilters);
        }

        if (mobileSlider && mobileSlider.noUiSlider) {
            mobileSlider.noUiSlider.on('change', applyFilters);
        }

        if (timeRange && timeRange.noUiSlider) {
            timeRange.noUiSlider.on('change', applyFilters);
        }

        if (mobileTimeRange && mobileTimeRange.noUiSlider) {
            mobileTimeRange.noUiSlider.on('change', applyFilters);
        }

        // Sync between desktop and mobile filters
        document.querySelectorAll('.feature-filter').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const feature = this.dataset.feature;
                const value = this.dataset.value;
                const mobileCheckbox = document.querySelector(`.mobile-feature-filter[data-feature="${feature}"][data-value="${value}"]`);
                if (mobileCheckbox) {
                    mobileCheckbox.checked = this.checked;
                }
                applyFilters();
            });
        });

        document.querySelectorAll('.mobile-feature-filter').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const feature = this.dataset.feature;
                const value = this.dataset.value;
                const desktopCheckbox = document.querySelector(`.feature-filter[data-feature="${feature}"][data-value="${value}"]`);
                if (desktopCheckbox) {
                    desktopCheckbox.checked = this.checked;
                }
                applyFilters();

                // Optional: close offcanvas when applying filters on mobile
                // const bsOffcanvas = bootstrap.Offcanvas.getInstance(document.getElementById('filterOffcanvas'));
                // if (bsOffcanvas) {
                //     bsOffcanvas.hide();
                // }
            });
        });

        // Sort functionality
        const sortOptions = document.getElementById('sortOptions');
        if (sortOptions) {
            sortOptions.addEventListener('change', function() {
                const sortValue = this.value;
                const productItems = Array.from(document.querySelectorAll('.product-item'));
                const container = document.getElementById('productsContainer');

                productItems.sort((a, b) => {
                    switch(sortValue) {
                        case 'price-asc':
                            return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
                        case 'price-desc':
                            return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
                        case 'name-asc':
                            return a.querySelector('.card-title').textContent.localeCompare(b.querySelector('.card-title').textContent);
                        case 'name-desc':
                            return b.querySelector('.card-title').textContent.localeCompare(a.querySelector('.card-title').textContent);
                        case 'date-desc':
                            return parseInt(b.dataset.created) - parseInt(a.dataset.created);
                        case 'date-asc':
                            return parseInt(a.dataset.created) - parseInt(b.dataset.created);
                        default:
                            return 0;
                    }
                });

                // Clear container and append sorted items
                container.innerHTML = '';
                productItems.forEach(item => container.appendChild(item));
            });
        }
    });
</script>

<style>
    /* Custom Styles */
    .product-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }

    .feature-filter-group {
        max-height: 200px;
        overflow-y: auto;
    }

    .filter-toggle-container {
        box-shadow: 0 -0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        z-index: 1030;
    }

    .discount-badge {
        border-radius: 4px;
        font-size: 0.75rem;
    }

    /* For nouislider */
    .noUi-connect {
        background: #0d6efd;
    }

    .noUi-horizontal {
        height: 8px;
    }

    .noUi-handle {
        border-radius: 50%;
        background: #fff;
        box-shadow: 0 0 0 1px #0d6efd;
        border: none;
        width: 20px !important;
        height: 20px !important;
        right: -9px !important;
        top: -6px !important;
    }

    .noUi-handle:before,
    .noUi-handle:after {
        display: none;
    }

    /* Add spacing at bottom for mobile to account for fixed filter button */
    @@media (max-width: 991.98px) {
        body {
            padding-bottom: 60px;
        }
    }
</style>